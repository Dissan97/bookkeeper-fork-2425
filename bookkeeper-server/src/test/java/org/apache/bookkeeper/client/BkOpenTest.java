package org.apache.bookkeeper.client;

import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.util.Arrays;
import java.util.Collection;

import static org.junit.Assert.*;

@RunWith(Parameterized.class)
public class BkOpenTest extends AbsBkOpen{


    public BkOpenTest(long iid, BookKeeper.DigestType digestType, byte[] passwd, TestOutcome outcome) {
        super(iid, digestType, passwd, outcome);
    }

    private static final Collection<Object[]> BK_OPEN_PARAMETERS = Arrays.asList(new Object[][]{
            {-1, BookKeeper.DigestType.MAC, VALID_PASSWORD, BkOpenTest.TestOutcome.BK_EXCEPTION},
            {0, BookKeeper.DigestType.DUMMY, VALID_PASSWORD, BkOpenTest.TestOutcome.VALID},
            {0, BookKeeper.DigestType.MAC, VALID_PASSWORD, BkOpenTest.TestOutcome.VALID},
            {0, BookKeeper.DigestType.CRC32, VALID_PASSWORD, BkOpenTest.TestOutcome.VALID},
            {0, BookKeeper.DigestType.CRC32C, VALID_PASSWORD, BkOpenTest.TestOutcome.VALID},
            {0, BookKeeper.DigestType.CRC32C, INVALID_PASSWORD, BkOpenTest.TestOutcome.INVALID_PASSWORD},
            {0, BookKeeper.DigestType.CRC32C, null, BkOpenTest.TestOutcome.INVALID_PASSWORD},
            {0, BookKeeper.DigestType.CRC32C, "".getBytes(), BkOpenTest.TestOutcome.INVALID_PASSWORD},
            {1, BookKeeper.DigestType.CRC32C, INVALID_PASSWORD, BkOpenTest.TestOutcome.BK_EXCEPTION},
    });

    @Parameterized.Parameters
    public static Collection<Object[]> data() {
        return BK_OPEN_PARAMETERS;
    }

    @Test
    public void test() {
        boolean passed = false;
        LedgerHandle lh;
        try {
            lh = bkClient.openLedger(this.iid, this.digestType, this.passwd);
            assertEquals(lh.getId(), validId);
            passed = outcome.equals(TestOutcome.VALID);
        } catch (BKException e) {
            passed = (e.getCode() == BKException.Code.NoSuchLedgerExistsOnMetadataServerException
                    && outcome.equals(TestOutcome.BK_EXCEPTION)) ||
                    (e.getCode() == BKException.Code.UnauthorizedAccessException
                            && outcome.equals(TestOutcome.INVALID_PASSWORD));
        } catch (NullPointerException e){
            passed = outcome.equals(TestOutcome.NULL);
        }
        catch (InterruptedException e) {
            fail();
        }
        assertTrue(passed);

    }


}
